upstream swoole-symfony {
    server unix:/run/php/swoole-symfony.sock fail_timeout=0;
    keepalive 32;
}

server {
    root /var/www/symfony/web;
    index swoole.php;
    access_log off;
    #location / {
        # try to serve file directly, fallback to swoole.php
        #try_files $uri /swoole.php$is_args$args;
    #}
    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    #location ~ ^/(app_dev|config)\.php(/|$) {
    #    proxy_set_header X-Forwarded-For $remote_addr;
    #    proxy_pass http://swoole-symfony;
    #    proxy_redirect off;
    #    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    #    include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
    #    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
    #    fastcgi_param DOCUMENT_ROOT $realpath_root;
    #}
    # PROD
    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri @swoole;
        # Uncomment to enable naxsi on this location
        # include /etc/nginx/naxsi.rules;
    }
    location @swoole {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Connection "keep-alive";
        proxy_buffers 8 24k;
        proxy_buffer_size 2k;
        proxy_pass http://swoole-symfony;
        proxy_redirect off;
        #fastcgi_split_path_info ^(.+\.php)(/.*)$;
        #include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        #fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        #fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        #internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }
}
